import cv2
import numpy as np

import matplotlib.pyplot as plt

import time


class Stand:
    def __init__(self, camera):
        self.video = cv2.VideoCapture(camera)

        self.measurements = []

        self.border1, self.border2 = self.get_selected_region(self.get_image())

    def get_image(self):
        success, image = self.video.read()
        if success:
            return image
        return []

    def get_selected_region(self, image):
        clone = image.copy()
        cv2.namedWindow("image")

        pts = []

        def select_region(event, x, y, flags, param):
            nonlocal pts

            if event == cv2.EVENT_LBUTTONDOWN:
                pts = [(x, y)]

            elif event == cv2.EVENT_LBUTTONUP:
                pts.append((x, y))
                cv2.rectangle(clone, pts[0], pts[1], (0, 255, 0), 2)
                cv2.imshow("image", clone)

        cv2.setMouseCallback("image", select_region)

        while True:
            cv2.imshow("image", clone)
            key = cv2.waitKey(1) & 0xFF

            if key == ord("c"):
                break

        cv2.destroyAllWindows()

        x1, y1 = min(pts[0][0], pts[1][0]), min(pts[0][1], pts[1][1])
        x2, y2 = max(pts[0][0], pts[1][0]), max(pts[0][1], pts[1][1])

        return (x1, y1), (x2, y2)

    def get_image_contours(self, image):
        gray_frame = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        img = cv2.medianBlur(gray_frame, 7)
        binary_image = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 5)
        contours, hierarchy = cv2.findContours(binary_image, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        img_contours = np.uint8(np.zeros((binary_image.shape[0], binary_image.shape[1])))
        for contour in contours:
            img_contours = cv2.drawContours(img_contours, [contour], -1, (255, 255, 255), 1)

        return img_contours

    def get_y_coordinate(self, bw_image):
        x = self.border1[0]

        for y in range(self.border1[1], self.border2[1]):
            pixel = bw_image[y][x]
            if pixel == 255 and bw_image[y + 1][x] == 0:

                is_it_white_line = True
                for i in range(100):
                    if bw_image[y][x + i] == 255 and bw_image[y + 1][x + i] == 255 \
                            and bw_image[y - 1][x + i] == 255:
                        is_it_white_line = False
                        break
                if not is_it_white_line:
                    continue
                return y
        return False

    def draw_point(self, image, y):
        x = self.border1[0]
        img_copy = image.copy()
        cv2.circle(img_copy, (x, y), 2, (0, 255, 0), -1)
        return img_copy

    def draw_line(self, image, y_min, y_max):
        img_copy = image.copy()
        cv2.line(img_copy, (0, y_max), (image.shape[1], y_max), (255, 255, 0), 1)
        cv2.line(img_copy, (0, y_min), (image.shape[1], y_min), (0, 255, 255), 1)
        return img_copy

    def coordinate_processing(self):
        mes = sorted(list(set(self.measurements)))
        maximum = 0
        minimum = 0
        unacceptable_difference = 6
        for i in range(1, len(mes) - 2):
            if mes[i] - mes[i - 1] < unacceptable_difference \
                    and mes[i + 1] - mes[i] < unacceptable_difference:
                maximum = mes[i - 1]
                break
        for j in range(len(mes) - 1, 1, -1):
            if mes[j] - mes[j - 1] < unacceptable_difference \
                    and mes[j - 1] - mes[j - 2] < unacceptable_difference:
                minimum = mes[j]
                break

        return minimum, maximum

    def normal_state(self):
        image = self.get_image()
        if len(image) == 0:
            return []
        image_contours = self.get_image_contours(image)
        y = self.get_y_coordinate(image_contours)
        if y:
            image_with_point = self.draw_point(image, y)
            return image_with_point
        return ["y not found"]

    def data_collection_state(self):
        image = self.get_image()
        if len(image) == 0:
            return []
        image_contours = self.get_image_contours(image)
        y = self.get_y_coordinate(image_contours)
        if y:
            self.measurements.append(y)
            y_min, y_max = self.coordinate_processing()
            image_with_point = self.draw_point(image, y)
            image_with_line = self.draw_line(image_with_point, y_min, y_max)
            return image_with_line
        return ["y not found"]

    def data_processing_state(self, y_max):
        image = self.get_image()
        if len(image) == 0:
            return []
        image_contours = self.get_image_contours(image)
        y = self.get_y_coordinate(image_contours)
        if y:
            image_with_line = self.draw_line(image, y_max)
            image_with_line_and_point = self.draw_point(image_with_line, y)
            return image_with_line_and_point
        return ["y not found"]


stand = Stand("Video2.mp4")
for _ in range(1000):
    img = stand.data_collection_state()
    if len(img) == 1:
        continue
    if len(img) == 0:
        break
    cv2.imshow("video", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
stand.video.release()
cv2.destroyAllWindows()
